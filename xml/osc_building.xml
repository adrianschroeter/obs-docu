<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha.obs.building"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Local Building</title>
 <info>
  <abstract>
   <para>
      Every build which happens on the server can also be executed locally in the same environment using
      the osc tool. All what you need is to checkout the source code and build the build recipe. The 
      following explains it for RPM format, but it works for any. osc will download needed binaries
      and execute the local build.
   </para>
  </abstract>
 </info>
 <remark>toms 2017-08-18: Also integrate content from obs_build_containers.xml</remark>
 
 <sect1 xml:id="sec.obs.building.generic">
  <title>Generic build options</title>
  <para>
     Independend of the build format you need at least one source file as build description.
     The file name and structure is format specific. You can find some supported formats described below.
     To build your build format, you need:
  </para>
  <itemizedlist>
   <listitem>
     <para>the original source archive. Instead of that the package may contain a _service file which
	   describes how to create it, for example by downloading it or building it from a SCM repository.
	   It can also be used to create the build description file. Find more details about it in the
	   source service chapter.
      </para>
   </listitem>
   <listitem>
    <para>
     optional patches which changes the original source code to fix problems
     regarding security, the build process, or other issues
    </para>
   </listitem>
   <listitem>
    <para>
     other files which do not fall into one of the previous categories
    </para>
   </listitem>
  </itemizedlist>
  <para>
   For existing packages, this is already the case. To build an
   existing package, the general procedure is as follows:</para>
  <procedure>
   <step>
    <para>
     If you have not done so yet, set up your project as shown in
     <xref linkend="sec.obs.basicworkflow.setuphome"/>.
    </para>
   </step>
   <step>
    <para>
     In the terminal, choose or create a directory on a local partition that
     has enough space to hold the package sources.
    </para>
   </step>
   <step>
    <para>
     Check out the project that contains the package:
    </para>
    <screen>&prompt.user;<command>osc</command> checkout <replaceable
     >PROJECT</replaceable> <replaceable>PACKAGE</replaceable></screen>
    <para>
     This creates a <filename><replaceable>PROJECT</replaceable>/<replaceable>PACKAGE</replaceable></filename>
     directory in the current directory.
    </para>
   </step>
   <step>
    <para>
     Change into the directory:
    </para>
    <screen>&prompt.user;<command>cd</command> <replaceable>PROJECT</replaceable>/<replaceable>PACKAGE</replaceable></screen>
   </step>
   <step>
    <para>
     The simplest way to run a build is just to call the build command. osc will try
     to detect your installed OS and build for it if possible.
    </para>
    <screen>&prompt.user;<command>osc</command> build</screen>
    <para>
     However, you may also manualy specify the build target. For example &opensuse; Tumbleweed for
     x86_64, you want to create the RPM package:
    </para>
    <screen>&prompt.user;<command>osc</command> build openSUSE_Tumbleweed x86_64</screen>
   </step>
   <step>
    <para>
	It will download the required dependencies and execute the build script. Therefore it needs to ask for root 
	permissions in most cases.
    </para>
    <variablelist>
     <varlistentry>
      <term>Successful Build</term>
      <listitem>
<!--       <para></para>-->
       <screen>[   15s] RPMLINT report:
[   15s] ===============
[   16s] 2 packages and 0 specfiles checked; 0 errors, 0 warnings.
[   16s]
[   16s]
[   16s] &wsII; finished "build <replaceable>PACKAGE</replaceable>.spec" at Fri Sep  1 11:54:31 UTC 2017.
[   16s]

/var/tmp/build-root/openSUSE_Tumbleweed-x86_64/home/abuild/rpmbuild/SRPMS/<replaceable
 >PACKAGE</replaceable>-<replaceable>VERSION</replaceable>-0.src.rpm

/var/tmp/build-root/openSUSE_Tumbleweed-x86_64/home/abuild/rpmbuild/RPMS/noarch/<replaceable>PACKAGE</replaceable>-<replaceable>VERSION</replaceable>-0.noarch.rpm</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Unsuccessful Build</term>
      <listitem>
<!--       <para></para>-->
       <screen>[    8s] &wsII; failed "build <replaceable>PACKAGE</replaceable>.spec" at Fri Sep  1 11:58:55 UTC 2017.
[    8s]

The buildroot was: /var/tmp/build-root/openSUSE_Tumbleweed-x86_64</screen>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     A successful build of a spec file ends with the creation of the RPM and SRPM files.
    </para>
   </step>
   <step>
    <para>
     For a detailed log, see the file
     <filename>/var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.log</filename>.
    </para>
   </step>
  </procedure>
 </sect1>

 <sect1 xml:id="sec.obs.building.advanced">
  <title>Advanced Build Environment Handling</title>
  <para>
	  The default build environment for local builds is usually chroot. While this is simplest environment
	  and is therefore easy and fast to handle, it has also a number of shortcummings. For one it is
	  not safe against attacks, so you must not build sources or using build dependendencies from a resource
	  which you do not trust. Furthermore the environment is not fully isolated and runs not the kernel the
	  target distribution runs. This means esp image builds and kernel/hardware specific builds may fail or
	  won't produce the same result. The server side is usually set to inside of KVM therefore to avoid this.
  </para>
  <itemizedlist>
   <listitem>
     <para>You can build also local in KVM (if your hardware supports it) by running
      </para>
      <screen>&prompt.user;<command>osc</command> build --vm-type=kvm --vm-memory=<replaceable>MB</replaceable></screen>
   </listitem>
   <listitem>
      <para>Another important virtualization mode is qemu. This can be used to build for a foreign hardware
	      architecture even when the distribution is not prepared for the qemu user land emulator. However, this
	      qemu system emulator approach will be much slower. 
      </para>
      <screen>&prompt.user;<command>osc</command> build --vm-type=qemu --vm-memory=<replaceable>MB</replaceable> <replaceable>REPOSITORY</replaceable> <replaceable>ARCHITECTURE</replaceable></screen>
   </listitem>
   <listitem>
     <para>You may want to jump inside of a the build environment for debugging purposes. This can be done via the following command:
           </para>
      <screen>&prompt.user;<command>osc</command> shell</screen>
   </listitem>
   <listitem>
     <para>To remove the build environemnt, use:
           </para>
      <screen>&prompt.user;<command>osc</command> wipe</screen>
   </listitem>
  </itemizedlist>
 </sect1>

 <sect1 xml:id="sec.obs.building.spec2rpm">
  <title>Spec File Specials (RPM)</title>
  <para>
     To create an RPM package, you need a spec file.
  </para>
  <itemizedlist>
   <listitem>
    <para>
     A file with the extension <filename class="extension">.changes</filename>
     can be used to document the package history, but it is not required.
    </para>
   </listitem>
   <listitem>
    <para>
     OBS specific RPM macros which are set are: <literal>%_project</literal> and <literal>%_repository</literal>
    </para>
   </listitem>
  </itemizedlist>
 </sect1>

 <sect1 condition="tbd">
  <title>CONTROL/RULES/DSC File Specials (Debian)</title>
  <para/>
  <remark>TBD</remark>
 </sect1>

 <sect1 condition="tbd">
  <title>PKGBUILD File Specials (Arch)</title>
  <para/>
  <remark>TBD</remark>
 </sect1>

 <sect1 condition="tbd">
  <title>As Snap Containers</title>
  <remark>toms 2017-08-18: see https://snapcraft.io/docs/build-snaps/ci-integration</remark>
  <para/>
  <remark>TBD</remark>
 </sect1>

 <sect1 condition="tbd">
  <title>As Livebuild Images</title>
  <remark>toms 2017-08-18: see https://www.debian.org/devel/debian-live/</remark>
  <para/>
  <remark>TBD</remark>
 </sect1>


 <sect1>
  <title>Kiwi Appliance Specials (&kiwi;)</title>
   <!--
    1. Create a repository in a project
       - enable all architectures
       - no other repo needed as defined in KIWI's XML config file
    2. Create project config, setting repo to
       - Type: kiwi
       - Repotype: none
    3. Create a package
    4. Submit adapted KIWI config files
    
    Things to watch for:
    * config.xml needs to have a .kiwi suffix
    * Repos needs to be specified as obs://$PROJECT/$REPO
    * Content of root directory as root.tar.bz2
    * If you get the error "have choice", select a package and add it to
      the package list
    * 
   -->
   <para>
	&kiwi; appliance builds create images which can be used for direct consument. Note: builds in non-VM 
	environments do fail often due to the bootloader setup. Use osc build --vm-type=kvm for local building.
	OBS is evaluating kiwi builds at least two times. One time for the build host dependencies and another
	time for the target distribution used inside of the image. For container builds a third evaluation
	happens to find the base container.
   </para>
   <para>
     kiwi builds inside of OBS need to fullfil following requirements:
   </para>
  <itemizedlist>
   <listitem>
     <para>config.xml files need to be renamed to a filename with .kiwi suffix. </para>
   </listitem>
   <listitem>
     <para>repositories which are used must use either a URL which starts with the OBS download prefix or they must
  	   be written in obs://PROJECT/REPOSITORY syntax. </para>
   </listitem>
  </itemizedlist>

   <para>
     OBS extends kiwi functionality with following options:
   </para>
  
  <itemizedlist>
   <listitem>
     <para>A repository defined as obsrepositories:/ will used the expanded list of repositories as defined in the proejct meta.
           This is useful when moving kiwi image descriptions between projects, for example for development and release builds. </para>
   </listitem>
   <listitem>
     <para>An exclusive architecture list to build for can be defined with an xml comment <command>OBS-ExclusiveArch: ARCH_LIST</command> 
     </para>
   </listitem>
   <listitem>
     <para>An excluded architecture list to skip builds can be defined with an xml comment <command>OBS-ExcludeArch: ARCH_LIST</command> 
     </para>
   </listitem>
   <listitem>
     <para>A list of profiles to build can be defined via an xml comment <command>OBS-Profiles: PROFILE_LIST</command> 
     </para>
     <para>This can also be handled via _multibuild flavor lists by setting a fixed string of <command>OBS-Profiles: @BUILD_FLAVOR@</command> 
     </para>
   </listitem>
   <listitem>
     <para>Packages get picked usually in a fixed order from the most important repository in &obsa;. This happens independend 
  	 of the version number of the packages. Set the xml comment <command>OBS-UnorderedRepos</command> to disable the repository order handling and to have a more similar behaviour as with plain package manager builds. Note: this can result into switching 
  	 repositories between builds and is therefore less reproducible.
     </para>
   </listitem>
   <listitem>
     <para>Container builds can specify a specific repository which shall be used for searching the base container. 
  	   Use the xml comment <command>OBS-Imagerepo:$REPOSITORY_URL</command> for this. The repository url may be
  	   in obs://$PROJECT/$REPOSITORY style.
     </para>
   </listitem>
   <listitem>
     <para>Container builds can specify additional tags via <command>OBS-AddTag:$TAG</command>. (kiwi limits it to one tag)
  	   in obs://$PROJECT/$REPOSITORY style.
     </para>
   </listitem>
  </itemizedlist>
 </sect1>

 <sect1 condition="tbd">
  <title>As &obs.pimg;</title>
  <remark>toms 2017-08-18: integrate content from  obs_build_preinstall.xml;
  using a _preinstallimage file</remark>
 </sect1>
 
</chapter>
